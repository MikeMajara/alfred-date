<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>com.MikeMajara.datetimeparser</string>
	<key>category</key>
	<string>Productivity</string>
	<key>connections</key>
	<dict>
		<key>87204822-EA61-4C18-A9BB-6ED4DA45AB41</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>9B46EE1F-98A4-41A4-AE35-EE795BBC4DF5</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>Mike Majara</string>
	<key>description</key>
	<string>Get date time stamp from natural language parsing</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>Date time</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>openwith</key>
				<string></string>
				<key>sourcefile</key>
				<string>{query}</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.openfile</string>
			<key>uid</key>
			<string>9B46EE1F-98A4-41A4-AE35-EE795BBC4DF5</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>2</integer>
				<key>fixedorder</key>
				<false/>
				<key>items</key>
				<string>[{"title":"settings","arg":".\/config.json"},{"title":"locales","arg":".\/locales.json"}]</string>
				<key>keyword</key>
				<string>dtconf</string>
				<key>runningsubtext</key>
				<string></string>
				<key>subtext</key>
				<string>Choose configuration file</string>
				<key>title</key>
				<string>Configure date time workflow</string>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.listfilter</string>
			<key>uid</key>
			<string>87204822-EA61-4C18-A9BB-6ED4DA45AB41</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<true/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>0</integer>
				<key>escaping</key>
				<integer>102</integer>
				<key>keyword</key>
				<string>dt</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>1</integer>
				<key>queuemode</key>
				<integer>2</integer>
				<key>runningsubtext</key>
				<string>Guessing the moment you are refering to...</string>
				<key>script</key>
				<string># This script is duplicated and functionality is implemented for
# both locigs: (with | without) language. Logic should be common
# and only change is LANGUAGE_PROVIDED.
# 
# $WORKFLOW_DIRECTORY/main.py is not the script being executed. 
# it is just a script to test and ease the development of the workflow. 
# Code being executed is stored in info.plist and should be modified through
# alfred to take effect.
# 
# important: print nothing else to STDOUT, or it will make your XML/JSON invalid.
# 
# Useful documentation: https://www.alfredapp.com/help/workflows/inputs/script-filter/json/
# date format patterns: https://unicode.org/reports/tr35/tr35-dates.html#Date_Format_Patterns
# Babel documentation: http://babel.pocoo.org/en/latest/dates.html?highlight=pattern#pattern-syntax

import os, sys
import traceback
import json

# add local library path to python path.
# needed to import 3rd party library installed.
# 
# install command example (cd to workflow directory):
# pip install --prefer-binary --target=./lib dateparser
sys.path = [os.path.abspath('./lib')] + sys.path

import dateparser
from babel.dates import format_datetime

LANGUAGE_PROVIDED = False

# Extract arguments from script
args = sys.argv[1].split()

with open("./config.json") as f:
    config = json.load(f)

with open("./locales.json") as f:
    locales = json.load(f)

fmts = config['formats']
lngs = config['languages']

if LANGUAGE_PROVIDED:
    query = " ".join(args[1:])
    out_lang = args[0].strip()
    if len(out_lang) == 2:
        name = locales[out_lang].get('name')
        format = locales[out_lang].get('default_format')
        out_lang = locales[out_lang].get('locale')
else:
    query = " ".join(args)
    out_lang = config['out_lang']
    
dt = dateparser.parse(query, languages=lngs)

result = {"items": []}
try:
    default_items = [
        {
            "valid": False,
            "icon": None,
            "title": fmt['format_string'],
            "subtitle": format_datetime(dt, format=fmt['format_string'], locale=out_lang),
            "text": {
                "copy": format_datetime(dt, format=fmt['format_string'], locale=out_lang),
                "largetype": format_datetime(dt, format=fmt['format_string'], locale=out_lang)
            }
        } for fmt in fmts
    ]
    result['items'] += default_items

    if LANGUAGE_PROVIDED:

        extra_item = {
            "valid": False,
            "icon": None,
            "title": format_datetime(dt, format=format, locale=out_lang),
            "subtitle": format + " - Default for " + name,
            "text": {
                "copy": format_datetime(dt, format=format, locale=out_lang),
                "largetype": format_datetime(dt, format=format, locale=out_lang)
            }
        }
        result['items'] += [extra_item]

except Exception as e:
    traceback.print_exc()
    # pass

sys.stdout.write(json.dumps(result))
</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string>dt [moment]. Then ⌘ + c or ⌘ + l to show off.</string>
				<key>title</key>
				<string>Date time for given moment</string>
				<key>type</key>
				<integer>3</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>893B59D9-A32D-49AC-84DE-3180C562BC25</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<true/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>0</integer>
				<key>escaping</key>
				<integer>68</integer>
				<key>keyword</key>
				<string>dtl</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>1</integer>
				<key>queuemode</key>
				<integer>2</integer>
				<key>runningsubtext</key>
				<string>Guessing the moment you are refering to...</string>
				<key>script</key>
				<string># This script is duplicated and functionality is implemented for
# both locigs: (with | without) language. Logic should be common
# and only change is LANGUAGE_PROVIDED.
# 
# $WORKFLOW_DIRECTORY/main.py is not the script being executed. 
# it is just a script to test and ease the development of the workflow. 
# Code being executed is stored in info.plist and should be modified through
# alfred to take effect.
# 
# important: print nothing else to STDOUT, or it will make your XML/JSON invalid.
# 
# Useful documentation: https://www.alfredapp.com/help/workflows/inputs/script-filter/json/
# date format patterns: https://unicode.org/reports/tr35/tr35-dates.html#Date_Format_Patterns
# Babel documentation: http://babel.pocoo.org/en/latest/dates.html?highlight=pattern#pattern-syntax

import os, sys
import traceback
import json

# add local library path to python path.
# needed to import 3rd party library installed.
# 
# install command example (cd to workflow directory):
# pip install --prefer-binary --target=./lib dateparser
sys.path = [os.path.abspath('./lib')] + sys.path

import dateparser
from babel.dates import format_datetime

LANGUAGE_PROVIDED = True

# Extract arguments from script
args = sys.argv[1].split()

with open("./config.json") as f:
    config = json.load(f)

with open("./locales.json") as f:
    locales = json.load(f)

fmts = config['formats']
lngs = config['languages']

if LANGUAGE_PROVIDED:
    query = " ".join(args[1:])
    out_lang = args[0].strip()
    if len(out_lang) == 2:
        name = locales[out_lang].get('name')
        format = locales[out_lang].get('default_format')
        out_lang = locales[out_lang].get('locale')
else:
    query = " ".join(args)
    out_lang = config['out_lang']
    
dt = dateparser.parse(query, languages=lngs)

result = {"items": []}
try:
    default_items = [
        {
            "valid": False,
            "icon": None,
            "title": fmt['format_string'],
            "subtitle": format_datetime(dt, format=fmt['format_string'], locale=out_lang),
            "text": {
                "copy": format_datetime(dt, format=fmt['format_string'], locale=out_lang),
                "largetype": format_datetime(dt, format=fmt['format_string'], locale=out_lang)
            }
        } for fmt in fmts
    ]
    result['items'] += default_items

    if LANGUAGE_PROVIDED:

        extra_item = {
            "valid": False,
            "icon": None,
            "title": format_datetime(dt, format=format, locale=out_lang),
            "subtitle": format + " - Default for " + name,
            "text": {
                "copy": format_datetime(dt, format=format, locale=out_lang),
                "largetype": format_datetime(dt, format=format, locale=out_lang)
            }
        }
        result['items'] += [extra_item]

except Exception as e:
    traceback.print_exc()
    # pass

sys.stdout.write(json.dumps(result))
</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string>dtl [lang] [moment]. Then ⌘ + c or ⌘ + l to show off.</string>
				<key>title</key>
				<string>Date time for given moment in a given language</string>
				<key>type</key>
				<integer>3</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>71580B42-FC83-48F8-8DE2-341CC160D563</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
	</array>
	<key>readme</key>
	<string># Date timestamp 🕐

## Description 📜
Gets timestamp using natural language
Examples:
`dt now`
`dt 1 day ago`
`dt in 2 weeks`
`dt six hours ago`

Usage:
1. Insert the keyword `dt`
2. Type in natural language a moment as seen in the examples above.
3. Navigate through the list to select a timestamp format
4. ⌘ + c to copy the result shown

## Instalation 👷🏻‍♂️
1. [Download the workflow](https://github.com/MikeMajara/alfred-date-time-stamp-parser/releases/tag/0.1.0)
2. Double click the `.alfredworkflow` file to install

💡 **Required: [Alfred Powerpack](https://www.alfredapp.com/powerpack/)**.

## Settings ⚙️
Inside the workflow folder, there is a file called `config.json`, use it to configure the timestamps you want to see in your workflow.
You can check the time format for strftime here -&gt; [Python strftime reference](https://strftime.org/)

## License 🗝
MIT License

Copyright (c) 2020 MikeMajara</string>
	<key>uidata</key>
	<dict>
		<key>71580B42-FC83-48F8-8DE2-341CC160D563</key>
		<dict>
			<key>xpos</key>
			<integer>330</integer>
			<key>ypos</key>
			<integer>390</integer>
		</dict>
		<key>87204822-EA61-4C18-A9BB-6ED4DA45AB41</key>
		<dict>
			<key>xpos</key>
			<integer>330</integer>
			<key>ypos</key>
			<integer>140</integer>
		</dict>
		<key>893B59D9-A32D-49AC-84DE-3180C562BC25</key>
		<dict>
			<key>xpos</key>
			<integer>330</integer>
			<key>ypos</key>
			<integer>265</integer>
		</dict>
		<key>9B46EE1F-98A4-41A4-AE35-EE795BBC4DF5</key>
		<dict>
			<key>xpos</key>
			<integer>565</integer>
			<key>ypos</key>
			<integer>140</integer>
		</dict>
	</dict>
	<key>variablesdontexport</key>
	<array/>
	<key>version</key>
	<string>0.1.0</string>
	<key>webaddress</key>
	<string>https://github.com/MikeMajara/alfred-date-time-stamp-parser.git</string>
</dict>
</plist>
